// <auto-generated />
using System;
using Catalog.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalog.Persistance.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20220925180201_DataInitialize")]
    partial class DataInitialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Catalog.Domain.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Attributes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(2843),
                            DisplayName = "Cinsiyet",
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(2853),
                            Name = "Gender",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(2854),
                            DisplayName = "Boyut",
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(2854),
                            Name = "Size",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(2855),
                            DisplayName = "Renk",
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(2856),
                            Name = "Color",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(2856),
                            DisplayName = "Marka",
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(2857),
                            Name = "Brand",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(6243),
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(6247),
                            Name = "Smart Phone",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(6248),
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(6248),
                            Name = "Computer",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(6249),
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(6249),
                            Name = "Tablet",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(6250),
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 856, DateTimeKind.Local).AddTicks(6250),
                            Name = "Boiler",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CategoryAttribute", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("CategoryAttribute", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            AttributeId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            AttributeId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            AttributeId = 2
                        },
                        new
                        {
                            CategoryId = 4,
                            AttributeId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            AttributeId = 3
                        },
                        new
                        {
                            CategoryId = 4,
                            AttributeId = 4
                        },
                        new
                        {
                            CategoryId = 4,
                            AttributeId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            AttributeId = 2
                        });
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 857, DateTimeKind.Local).AddTicks(61),
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 857, DateTimeKind.Local).AddTicks(64),
                            Name = "Test Product_1",
                            Price = 50m,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 857, DateTimeKind.Local).AddTicks(65),
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 857, DateTimeKind.Local).AddTicks(66),
                            Name = "Test Product_2",
                            Price = 100m,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 857, DateTimeKind.Local).AddTicks(67),
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 857, DateTimeKind.Local).AddTicks(67),
                            Name = "Test Product_3",
                            Price = 150m,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2022, 9, 25, 21, 2, 0, 857, DateTimeKind.Local).AddTicks(68),
                            ModifiedDate = new DateTime(2022, 9, 25, 21, 2, 0, 857, DateTimeKind.Local).AddTicks(68),
                            Name = "Test Product_4",
                            Price = 200m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Catalog.Domain.Entities.ProductAttribute", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ProductId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("ProductAttribute", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AttributeId = 1,
                            Value = "Erkek"
                        },
                        new
                        {
                            ProductId = 1,
                            AttributeId = 2,
                            Value = "XXL"
                        },
                        new
                        {
                            ProductId = 2,
                            AttributeId = 2,
                            Value = "M"
                        },
                        new
                        {
                            ProductId = 3,
                            AttributeId = 2,
                            Value = "L"
                        },
                        new
                        {
                            ProductId = 3,
                            AttributeId = 3,
                            Value = "Mavi"
                        },
                        new
                        {
                            ProductId = 4,
                            AttributeId = 1,
                            Value = "Bayan"
                        },
                        new
                        {
                            ProductId = 4,
                            AttributeId = 4,
                            Value = "Test Brand"
                        });
                });

            modelBuilder.Entity("Catalog.Domain.Entities.CategoryAttribute", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.Attribute", "Attribute")
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Domain.Entities.Category", "Category")
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Product", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.ProductAttribute", b =>
                {
                    b.HasOne("Catalog.Domain.Entities.Attribute", "Attribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Attribute", b =>
                {
                    b.Navigation("CategoryAttributes");

                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Category", b =>
                {
                    b.Navigation("CategoryAttributes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Catalog.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
